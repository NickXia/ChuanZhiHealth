<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/mvc
                            http://www.springframework.org/schema/mvc/spring-mvc.xsd
                            http://code.alibabatech.com/schema/dubbo
                            http://code.alibabatech.com/schema/dubbo/dubbo.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context.xsd
                            http://www.springframework.org/schema/security
                            http://www.springframework.org/schema/security/spring-security.xsd">

    <!--匿名访问,匿名过滤器,将一些静态资源进行放行-->
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/pages/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    <security:http pattern="/login.html" security="none"/>

    <!--配置需要权限才能访问的资源
    auto-config:自动配置默认生成登录页面
    use-expressions:是否使用表达式
    -->
    <security:http auto-config="true" use-expressions="true">

        <!--只要认证通过就可以访问a.html-->
        <security:intercept-url pattern="/a.html" access="isAuthenticated()"/>

        <!--拥有add权限就可以访问b.html-->
        <security:intercept-url pattern="/b.html" access="hasAuthority('add')"/>

        <!--拥有delete权限就可以访问c.html-->
        <security:intercept-url pattern="/c.html" access="hasAuthority('delete')"/>

        <!--拥有ROLE_ADMIN角色权限就可以访问d.html-->
        <security:intercept-url pattern="/d.html" access="hasRole('ROLE_ADMIN')"/>

        <!--拥有ROLE_ADMIN角色就可以访问d.html页面，
            注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/index.html" access="hasRole('ADMIN')"/>

        <security:intercept-url pattern="/e.html"  access="hasRole('update')" />

        <!--配置认证规则:
        pattern:所有页面和请求都会被拦截
        access:指定具体的角色访问
        -->
        <!--<security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"></security:intercept-url>-->

        <!--配置自定义登录页面
        login-processing-url:指定登录的action
        login-page:指定登录页面
        username-parameter:指定用户名的name
        password-parameter:指定密码的name
        default-target-url可以取代authentication-success-forward-url:登录成功之后跳转的页面,
        默认是登录之前跳转什么页面,登录成功之后就跳转到该页面
        authentication-failure-forward-url:认证失败跳转的页面
        -->
        <security:form-login login-processing-url="/login.do"
                login-page="/login.html"
                username-parameter="username"
                password-parameter="password"
                authentication-failure-forward-url="/login.html"
                default-target-url="/index.html"/>

        <!--关闭CsrfFilter过滤器-->
        <security:csrf disabled="true"/>

        <!--登出配置-->
        <security:logout logout-url="/logout.do"
                         logout-success-url="/login.html"
                         invalidate-session="true"/>
    </security:http>



    <!--&lt;!&ndash;配置认证管理器&ndash;&gt;
    <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                &lt;!&ndash;配置账号密码以及该账号的角色信息
                name属性:用户名
                authorities属性:被赋予的角色
                password属性:密码
                &ndash;&gt;
                <security:user name="admin" authorities="ROLE_ADMIN" password="{noop}123456"></security:user>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>-->

    <!--配置认证管理器 自定义的认证和授权类-->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="springSecurityUserService">
            <!--指定密码加密策略-->
            <security:password-encoder ref="bCryptPasswordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>
    <!--bean方式注册SpringSecurityUserService-->
    <bean id="springSecurityUserService" class="com.zizhou.security.SpringSecurityUserService"/>

    <!--注册密码加密对象-->
    <bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!--加入扫描-->
    <context:component-scan base-package="com"/>

    <!--启动权限注解-->
    <security:global-method-security pre-post-annotations="enabled"/>
</beans>